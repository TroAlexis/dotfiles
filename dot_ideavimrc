source ~/.vimrc

" test

if has('ide')
	set history=1000
	" Fixed the problem that p paste cannot import class automatically, https://youtrack.jetbrains.com/issue/VIM-25/VIM-code-paste-should-be-smarter
	set clipboard+=ideaput,unnamed
	" Smart join for <C-J>
	set ideajoin
	set ideamarks
	set idearefactormode=keep
	" Ideavim Extension for switching to English in normal"
	set keep-english-in-normal
	" Ideavim Extension for switching to English in normal"

	" Ideavim Extension for highligting unique characters in line
	set quickscope

	" Ideavim Extension for displaying keymap info https://github.com/TheBlob42/idea-which-key
	set which-key
	" do not close after timeout, but after keypress or cancelling
	set notimeout
	" make the popup appear much slower
	let g:WhichKey_DefaultDelay = 600
	" close the popup and don't process formerly typed keys
	let g:WhichKey_ProcessUnknownMappings = "false"
	" set how the elements should be ordered
	let g:WhichKey_SortOrder = "by_description"
	" set if the sorting should be case-sensitive or not
	let g:WhichKey_SortCaseSensitive = "false"

	" Leader namespace
	let g:WhichKeyDesc_actions = "<leader> Actions"

	" Config manipulations
	let g:WhichKeyDesc_config = "<Bslash> Config"
	let g:WhichKeyDesc_config_edit = "<Bslash>e Edit IdeaVimrc"
	nnoremap \e :e ~/.ideavimrc<CR>
	let g:WhichKeyDesc_config_reload = "<Bslash>r Reload IdeaVimrc"
	nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>
	" Config manipulations

	" Focus last buffer
	nnoremap <leader><Tab>    <C-S-6>
	vnoremap <leader><Tab>    <Esc><C-S-6>

	" Open in terminal
	let g:WhichKeyDesc_terminal = "<leader>t Terminal"
	let g:WhichKeyDesc_terminal_edit = "<leader>te Open in terminal"
	nnoremap <leader>te    :action Terminal.OpenInTerminal<CR>
	vnoremap <leader>te    :action Terminal.OpenInTerminal<CR>

	let g:WhichKeyDesc_terminal_toggle = "<leader>tt Toggle terminal"
	nnoremap <leader>tt    :action ActivateTerminalToolWindow<CR>
	vnoremap <leader>tt    :action ActivateTerminalToolWindow<CR>

	let g:WhichKeyDesc_usages = "<leader>* Show usages"
	nnoremap <leader>*    :action ShowUsages<CR>
	vnoremap <leader>*    :action ShowUsages<CR>

	let g:WhichKeyDesc_project = "<leader>p Project"
	" Project save
	let g:WhichKeyDesc_project_save = "<leader>ps Save all"
	nnoremap <leader>ps    :action SaveAll<CR>
	vnoremap <leader>ps    :action SaveAll<CR>

	let g:WhichKeyDesc_project_file = "<leader>pf File"
	" Copy project file path
	let g:WhichKeyDesc_project_copy_path = "<leader>pfy Copy absolute file path"
	nnoremap <leader>pfy    :action CopyAbsolutePath<CR>
	vnoremap <leader>pfy    :action CopyAbsolutePath<CR>

	" Project new file
	let g:WhichKeyDesc_project_new_file = "<leader>pfn Create new file"
	nnoremap <leader>pfn    :action NewElementMenu<CR>
	vnoremap <leader>pfn    :action NewElementMenu<CR>

	" Rename file
	let g:WhichKeyDesc_project_rename_file = "<leader>pfr Rename file"
	map <leader>pfr :action RenameFile<CR>

	" -- Errors --

	" Error navigation mappings
	let g:WhichKeyDesc_error = "<leader>e Error navigation"

	" Go to next error
	let g:WhichKeyDesc_error_next = "<leader>en Go to next error"
	nnoremap <leader>en           :action GotoNextError<CR>
	vnoremap <leader>en           <Esc>:action GotoNextError<CR>

	" Go to previous error
	let g:WhichKeyDesc_error_prev = "<leader>ep Go to previous error"
	nnoremap <leader>ep           :action GotoPreviousError<CR>
	vnoremap <leader>ep           <Esc>:action GotoPreviousError<CR>

	" -- Errors --
	

	" -- Git --

	" Git commands namespace
	let g:WhichKeyDesc_git = "<leader>g Git commands"

	" Git clone
	let g:WhichKeyDesc_git_clone = "<leader>gc Git clone"
	nnoremap <leader>gc          :action Git.Clone<CR>
	vnoremap <leader>gc          :action Git.Clone<CR>

	" Show log of current file
	let g:WhichKeyDesc_git_file_log = "<leader>gfl Show log of current file"
	nnoremap <leader>gfl            :action Vcs.ShowTabbedFileHistory<CR>
	vnoremap <leader>gfl            :action Vcs.ShowTabbedFileHistory<CR>

	" Annotate
	let g:WhichKeyDesc_git_annotate = "<leader>ga Annotate"
	nnoremap <leader>ga             :action Annotate<CR>
	vnoremap <leader>ga             :action Annotate<CR>

	" -- Git --
	

	" -- Changes --

	" Fold commands namespace
	let g:WhichKeyDesc_fold = "<leader>z Fold commands"

	" Collapse all folds
	let g:WhichKeyDesc_fold_collapse_all = "<leader>zm Collapse all folds"
	nnoremap <leader>zm                 :action CollapseAllRegions<CR>
	vnoremap <leader>zm                 :action CollapseAllRegions<CR>

	" Open all folds
	let g:WhichKeyDesc_fold_expand_all = "<leader>zr Open all folds"
	nnoremap <leader>zr               :action ExpandAllRegions<CR>
	vnoremap <leader>zr               :action ExpandAllRegions<CR>

	" -- Changes --


	" -- Numbers --

	" Number commands namespace
	let g:WhichKeyDesc_number = "<leader>n Number commands"

	" Increment number
	let g:WhichKeyDesc_number_increment = "<leader>ni Increment number"
	nnoremap <leader>ni                    <C-a>
	vnoremap <leader>ni                    <C-a>

	" Decrement number
	let g:WhichKeyDesc_number_decrement = "<leader>nd Decrement number"
	nnoremap <leader>nd                 <C-x>
	vnoremap <leader>nd                 <C-x>

	" -- Numbers --
	

	" -- Windows  --
	
	" Window management commands namespace
	let g:WhichKeyDesc_window = "<leader>w Window management"

	" Split window right
	let g:WhichKeyDesc_window_split_right1 = "<leader>w/ Split window right"
	let g:WhichKeyDesc_window_split_right2 = "<leader>wv Split window right"
	nnoremap <leader>w/                    :action SplitVertically<CR>
	vnoremap <leader>w/                    <Esc>:action SplitVertically<CR>
	nnoremap <leader>wv                    :action SplitVertically<CR>
	vnoremap <leader>wv                    <Esc>:action SplitVertically<CR>

	" Split window below
	let g:WhichKeyDesc_window_split_below1 = "<leader>w- Split window below"
	let g:WhichKeyDesc_window_split_below2 = "<leader>ws Split window below"
	nnoremap <leader>w-                    :action SplitHorizontally<CR>
	vnoremap <leader>w-                    <Esc>:action SplitHorizontally<CR>
	nnoremap <leader>ws                    :action SplitHorizontally<CR>
	vnoremap <leader>ws                    <Esc>:action SplitHorizontally<CR>

	" Close window
	let g:WhichKeyDesc_window_close1 = "<leader>wd Close window"
	let g:WhichKeyDesc_window_close2 = "<leader>wx Close window"
	nnoremap <leader>wd                :action CloseAllEditors<CR>
	vnoremap <leader>wd                <Esc>:action CloseAllEditors<CR>
	nnoremap <leader>wx                :action CloseAllEditors<CR>
	vnoremap <leader>wx                <Esc>:action CloseAllEditors<CR>

	" Focus window left
	let g:WhichKeyDesc_window_left1 = "<leader>wh Focus window left"
	let g:WhichKeyDesc_window_left2 = "<leader>w<Left> Focus window left"
	nnoremap <leader>wh                <C-w>h
	vnoremap <leader>wh                <Esc><C-w>h
	nnoremap <leader>w<Left>           <C-w>h
	vnoremap <leader>w<Left>           <Esc><C-w>h

	" Focus window down
	let g:WhichKeyDesc_window_down1 = "<leader>wj Focus window down"
	let g:WhichKeyDesc_window_down2 = "<leader>w<Down> Focus window down"
	nnoremap <leader>wj                <C-w>j
	vnoremap <leader>wj                <Esc><C-w>j
	nnoremap <leader>w<Down>           <C-w>j
	vnoremap <leader>w<Down>           <Esc><C-w>j

	" Focus window up
	let g:WhichKeyDesc_window_up1 = "<leader>wk Focus window up"
	let g:WhichKeyDesc_window_up2 = "<leader>w<Up> Focus window up"
	nnoremap <leader>wk              <C-w>k
	vnoremap <leader>wk              <Esc><C-w>k
	nnoremap <leader>w<Up>           <C-w>k
	vnoremap <leader>w<Up>           <Esc><C-w>k

	" Focus window right
	let g:WhichKeyDesc_window_right1 = "<leader>wl Focus window right"
	let g:WhichKeyDesc_window_right2 = "<leader>w<Right> Focus window right"
	nnoremap <leader>wl                <C-w>l
	vnoremap <leader>wl                <Esc><C-w>l
	nnoremap <leader>w<Right>          <C-w>l
	vnoremap <leader>w<Right>          <Esc><C-w>l

	" Split window below and focus
	let g:WhichKeyDesc_window_split_focus_below = "<leader>wS Split window below and focus"
	nnoremap <leader>wS                    <C-w>s<C-w>j
	vnoremap <leader>wS                    <Esc><C-w>s<C-w>j

	" Split window right and focus
	let g:WhichKeyDesc_window_split_focus_right = "<leader>wV Split window right and focus"
	nnoremap <leader>wV                    <C-w>v<C-w>l
	vnoremap <leader>wV                    <Esc><C-w>v<C-w>l

	" Focus next window
	let g:WhichKeyDesc_window_next = "<leader>ww Focus next window"
	nnoremap <leader>ww             :action NextSplitter<CR>
	vnoremap <leader>ww             <Esc>:action NextSplitter<CR>

	" -- Windows  --
	
	" -- Zoom  --

	" Font size commands namespace
	let g:WhichKeyDesc_font = "<leader>zx Font size commands"

	" Increase font size
	let g:WhichKeyDesc_font_increase = "<leader>zxi Increase font size"
	nnoremap <leader>zxi             :action EditorIncreaseFontSize<CR>
	vnoremap <leader>zxi             :action EditorIncreaseFontSize<CR>

	" Decrease font size
	let g:WhichKeyDesc_font_decrease = "<leader>zxd Decrease font size"
	nnoremap <leader>zxd             :action EditorDecreaseFontSize<CR>
	vnoremap <leader>zxd             :action EditorDecreaseFontSize<CR>

	" Reset font size
	let g:WhichKeyDesc_font_reset = "<leader>zxr Reset font size"
	nnoremap <leader>zxr             :action EditorResetFontSize<CR>
	vnoremap <leader>zxr             :action EditorResetFontSize<CR>

	" -- Zoom  --

	" IDE menus
	
	" IDE menus namespace
	let g:WhichKeyDesc_ide = "<leader>m IDE menus"

	" Git main menu
	let g:WhichKeyDesc_ide_git_menu = "<leader>mg Git main menu"
	map <leader>mg              <Action>(Git.MainMenu)

	" Code menu
	let g:WhichKeyDesc_ide_code_menu = "<leader>mc Code menu"
	nmap <leader>mc             <Action>(CodeMenu)

	" Tool windows group
	let g:WhichKeyDesc_ide_tool_windows = "<leader>mw Tool windows group"
	nmap <leader>mw             <Action>(ToolWindowsGroup)

	" Manage recent projects
	let g:WhichKeyDesc_ide_manage_recent = "<leader>mp Manage recent projects"
	map <leader>mp             <Action>(ManageRecentProjects)

	" Activate npm tool window
	let g:WhichKeyDesc_ide_activate_npm = "<leader>mn Activate npm tool window"
	map <leader>mn             <Action>(ActivatenpmToolWindow)

	" Activate project tool window
	let g:WhichKeyDesc_ide_activate_project = "<leader>mv Activate project tool window"
	map <leader>mv             <Action>(ActivateProjectToolWindow)

	" Select in project view
	let g:WhichKeyDesc_ide_select_project_view = "<leader>ml Select in project view"
	map <leader>ml             <Action>(SelectInProjectView)

	" Toggle Zen mode
	let g:WhichKeyDesc_ide_toggle_zen = "<leader>mz Toggle Zen mode"
	map <leader>mz             <Action>(ToggleZenMode)

	" Choose run configuration
	let g:WhichKeyDesc_ide_choose_run = "<leader>mr Choose run configuration"
	map <leader>mr             <Action>(ChooseRunConfiguration)

	" Run class under cursor
	let g:WhichKeyDesc_ide_run_class = "<leader>mR Run class under cursor"
	map <leader>mR             <Action>(RunClass)

	" Choose debug configuration
	let g:WhichKeyDesc_ide_choose_debug = "<leader>md Choose debug configuration"
	map <leader>md             <Action>(ChooseDebugConfiguration)

	" Debug class under cursor
	let g:WhichKeyDesc_ide_debug_class = "<leader>mD Debug class under cursor"
	map <leader>mD             <Action>(DebugClass)

	" Select in
	let g:WhichKeyDesc_ide_select_in = "<leader>ms Select in"
	map <leader>ms             <Action>(SelectIn)

	" String manipulation popup
	let g:WhichKeyDesc_ide_string_manip = "<leader>mm String manipulation popup"
	map <leader>mm             <Action>(osmedile.intellij.stringmanip.PopupChoiceAction)

	" File structure popup
	let g:WhichKeyDesc_ide_file_structure = "<leader>mo File structure popup"
	map <leader>mo             <Action>(FileStructurePopup)

	" Call hierarchy
	let g:WhichKeyDesc_ide_call_hierarchy = "<leader>mu Call hierarchy"
	map <leader>mu             <Action>(CallHierarchy)

	" Local history
	let g:WhichKeyDesc_ide_local_history = "<leader>mh Local history"
	map <leader>mh             <Action>(LocalHistory.ShowHistory)

	" Bookmarks namespace
	let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"

	" Show bookmarks
	let g:WhichKeyDesc_bookmarks_show = "<leader>mb Show bookmarks"
	nnoremap <leader>mb       :action ShowBookmarks<CR>
	vnoremap <leader>mb       :action ShowBookmarks<CR>

	" Goto next bookmark
	let g:WhichKeyDesc_bookmarks_next = "<leader>bn Goto next bookmark"
	map <leader>bn           <Action>(GotoNextBookmark)

	" Goto previous bookmark
	let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Goto previous bookmark"
	map <leader>bp           <Action>(GotoPreviousBookmark)

	" Toggle bookmark
	let g:WhichKeyDesc_bookmarks_toggle = "<leader>bb Toggle bookmark"
	map <leader>bb           <Action>(ToggleBookmark)

	" IDE menus

	" Hover mapping
	let g:WhichKeyDesc_show_error = "gj Show error description"
	map gj <Action>(ShowErrorDescription)
	let g:WhichKeyDesc_show_hover= "gh Show hover info"
	map gh <Action>(ShowHoverInfo)
	let g:WhichKeyDesc_show_type_definition = "gh Show quick type definition"
	map gt <Action>(QuickTypeDefinition)
	let g:WhichKeyDesc_edit_source = "ge Edit source"
	map ge <Action>(EditSource)

	" Find actions namespace
	let g:WhichKeyDesc_find_actions = "<leader>f Find actions"

	" Find action
	let g:WhichKeyDesc_find_action = "<leader>fa Find action"
	nnoremap <leader>fa :action GotoAction<CR>
	vnoremap <leader>fa :action GotoAction<CR>

	" Find file
	let g:WhichKeyDesc_find_file = "<leader>ff Find file"
	nnoremap <leader>ff :action GotoFile<CR>
	vnoremap <leader>ff :action GotoFile<CR>

	" Find in path (globally)
	let g:WhichKeyDesc_find_in_path = "<leader>fg Find globally"
	nnoremap <leader>fg :action FindInPath<CR>
	vnoremap <leader>fg :action FindInPath<CR>

	" Find symbol
	let g:WhichKeyDesc_find_symbol = "<leader>fs Find symbol"
	nnoremap <leader>fs :action GotoSymbol<CR>
	vnoremap <leader>fs :action GotoSymbol<CR>

	" Refactoring
	" Refactor actions namespace
	let g:WhichKeyDesc_refactor_actions = "<leader>r Refactor actions"

	" Rename element
	let g:WhichKeyDesc_refactor_rename_element = "<leader>rn Rename element"
	map <leader>rn <Action>(RenameElement)

	" Reformat code
	let g:WhichKeyDesc_refactor_reformat_code = "<leader>rr Reformat code"
	map <leader>rr <Action>(ReformatCode)

	" Reformat with Prettier
	let g:WhichKeyDesc_refactor_reformat_prettier = "<leader>rR Reformat with Prettier"
	map <leader>rR <Action>(ReformatWithPrettierAction)

	" Fix ESLint issues
	let g:WhichKeyDesc_refactor_eslint_fix = "<leader>re Fix ESLint issues"
	map <leader>re <Action>(Javascript.Linters.EsLint.Fix)

	" Fix Stylelint issues
	let g:WhichKeyDesc_refactor_stylelint_fix = "<leader>rs Fix Stylelint issues"
	map <leader>rs <Action>(Stylelint.Fix)

	" Optimize imports
	let g:WhichKeyDesc_refactor_optimize_imports = "<leader>ri Optimize imports"
	map <leader>ri <Action>(OptimizeImports)

	" Quick list of refactorings
	let g:WhichKeyDesc_refactor_quick_list = "<leader>rt Quick list of refactorings"
	map <leader>rt <Action>(Refactorings.QuickListPopupAction)

	" Sort lines
	let g:WhichKeyDesc_refactor_sort_lines = "<leader>rl Sort lines"
	map <leader>rl <Action>(EditorSortLines)
	" Refactoring
	"
	" Comments

	vmap gcb <Action>(CommentByBlockComment)

	" Move text up and down.
	" nnoremap <A-Up> :m .-2<CR>==
	" nnoremap <A-Down> :m .+1<CR>==
	" inoremap <A-Up> <Esc>:m .-2<CR>==gi
	" inoremap <A-Down> <Esc>:m .+1<CR>==gi
	" NOTE It's not the same as using Vim's Ex-commands.
	nmap <A-Up> <Action>(MoveStatementUp)
	nmap <A-Down> <Action>(MoveStatementDown)
	imap <A-Up> <Action>(MoveStatementUp)
	imap <A-Down> <Action>(MoveStatementDown)
	vmap <A-Up> <Action>(MoveStatementUp)
	vmap <A-Down> <Action>(MoveStatementDown)

	" built-in navigation to navigated items works better
	nmap <c-o> <Action>(Back)
	nmap <c-i> <Action>(Forward)
	" but preserve ideavim defaults
	nnoremap g<c-o> <c-o>
	nnoremap g<c-i> <c-i>

	" built in search
	xnoremap g/ :action Find<cr>
	noremap g/ :action Find<cr>

	" use IDE undo instead of vim undo as it undoes the whole insert
	" (works not well with code completion tools like copilot)
	nmap u <Action>($Undo)

	" Commands for shortcut conflicts
	sethandler <S-Tab> a:vim
	sethandler <A-Up> a:vim
	sethandler <A-Down> a:vim
	sethandler <C-;> a:vim
	sethandler <C-S-;> a:vim
	sethandler <C-A> a:vim
	sethandler <C-D> a:vim
	sethandler <C-E> a:vim
	sethandler <C-F> a:vim
	sethandler <C-G> a:vim
	sethandler <C-H> a:vim
	sethandler <C-J> a:vim
	sethandler <C-K> a:vim
	sethandler <C-L> a:vim
	sethandler <C-M> a:vim
	sethandler <C-P> a:vim
	sethandler <A-P> a:ide
	sethandler <C-R> a:vim
	sethandler <C-S> a:vim
	sethandler <C-T> a:vim
	sethandler <C-U> a:vim
	sethandler <C-V> a:vim
	sethandler <C-W> a:vim
	sethandler <A-X> a:ide
	" Commands for shortcut conflicts
endif
