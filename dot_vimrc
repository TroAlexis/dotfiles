let is_ide = has('ide')

" Autoload plugins
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Autoload plugins

" Run chezmoi apply on saving a dotfile
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path "%"
" Run chezmoi apply on saving a dotfile

let g:notes_directories = ['~/Documents/Notes']

" Plugins ---------------------------------
call plug#begin('~/.vim/plugged')
Plug 'easymotion/vim-easymotion'
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" highlight f, F, t, T unique characters
Plug 'unblevable/quick-scope'
Plug 'machakann/vim-highlightedyank'
Plug 'preservim/nerdtree'
" ys, cs, ds, S
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
" gcc, gc + motion, v_gc
Plug 'tpope/vim-commentary'
" [count]["x]gr{motion}, [count]["x]grr, {Visual}["x]gr
Plug 'vim-scripts/ReplaceWithRegister'
" argument text objects: aa, ia
Plug 'vim-scripts/argtextobj.vim'
" cx, cxx, X, cxc
Plug 'tommcdo/vim-exchange'
" entire buffer text object: ae
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
" ai, ii, aI
Plug 'michaeljsmith/vim-indent-object'
Plug 'chrisbra/matchit'
Plug 'xolox/vim-notes'
Plug 'xolox/vim-misc'
call plug#end()
" Plugins ---------------------------------

let mapleader=" "

" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=10
set sidescroll=20
set sidescrolloff=30
set visualbell

" Theme settings --------------------------
if !is_ide
	syntax on
endif
" Theme settings --------------------------
"
" Do incremental searching.
set incsearch
set ignorecase smartcase
"message on the status line to show current mode
set showmode
"show (partial) command in the status bar
set showcmd
set hlsearch
set number relativenumber
set clipboard=unnamed

let g:argtextobj_pairs="(:),{:},<:>,[:]"


" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence


" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors

" Display the search results in the middle of the screen
noremap * *zz
noremap # #zz
noremap n nzz
noremap N Nzz

" Scroll horizontally with uppercase H and L"
nnoremap L 40lzs
nnoremap H 40hze
nnoremap $ $zs

" Easymotion ----
map <leader>/ <Plug>(easymotion-s)
map <leader>? <Plug>(easymotion-jumptoanywhere)
" Easymotion ----

" clear the search buffer when hitting return
nnoremap <CR> :nohlsearch<CR>

" Map Tab to indent line
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Map oo/OO to insert newline without entering insert mode
nmap <leader>o o<Esc>k
nmap <leader>O O<Esc>j

nnoremap K i<CR><Esc>l

map U <C-R>
inoremap <C-l> <Del>

" Make Y behave the same way as D and C.
nnoremap Y y$

" Line text-objects.
nnoremap yil ^vg_y
vnoremap il ^og_

" Text objects for delimiters.
nnoremap ci/ T/ct/
nnoremap ca/ F/ct/
nnoremap ci, T,ct,
nnoremap ca, F,ct,
nnoremap ci. T.ct.
nnoremap ca. F.ct.
nnoremap ci_ T_ct_
nnoremap ca_ F_ct_
nnoremap ci- T-ct-
nnoremap ca- F-ct-
nnoremap ci% T%ct%
nnoremap ca% F%ct%
nnoremap ci= T=ct=
nnoremap ca= F=ct=
nnoremap ci? T?ct?
nnoremap ca? F?ct?
nnoremap ci! T!ct!
nnoremap ca! F!ct!
nnoremap ci& T&ct&
nnoremap ca& F&ct&
nnoremap ci* T*ct*
nnoremap ca* F*ct*
nnoremap di/ T/ct/
nnoremap da/ F/dt/
nnoremap di, T,dt,
nnoremap da, F,dt,
nnoremap di. T.dt.
nnoremap da. F.dt.
nnoremap di_ T_dt_
nnoremap da_ F_dt_
nnoremap di- T-dt-
nnoremap da- F-dt-
nnoremap di% T%dt%
nnoremap da% F%dt%
nnoremap di= T=dt=
nnoremap da= F=dt=
nnoremap di? T?dt?
nnoremap da? F?dt?
nnoremap di! T!dt!
nnoremap da! F!dt!
nnoremap di& T&dt&
nnoremap da& F&dt&
nnoremap di* T*dt*
nnoremap da* F*ct*
nnoremap vi/ c/vt/
nnoremap va/ c/vt/
nnoremap vi, T,vt,
nnoremap va, F,vt,
nnoremap vi. T.vt.
nnoremap va. F.vt.
nnoremap vi_ T_vt_
nnoremap va_ F_vt_
nnoremap vi- T-vt-
nnoremap va- F-vt-
nnoremap vi% T%vt%
nnoremap va% F%vt%
nnoremap vi= T=vt=
nnoremap va= F=vt=
nnoremap vi? T?vt?
nnoremap va? F?vt?
nnoremap vi! T!vt!
nnoremap va! F!vt!
nnoremap vi& T&vt&
nnoremap va& F&vt&
nnoremap vi* T*vt*
nnoremap va* F*vt*
nnoremap yi/ T/yt/
nnoremap ya/ F/yt/
nnoremap yi, T,yt,
nnoremap ya, F,yt,
nnoremap yi. T.yt.
nnoremap ya. F.yt.
nnoremap yi_ T_yt_
nnoremap ya_ F_yt_
nnoremap yi- T-yt-
nnoremap ya- F-yt-
nnoremap yi% T%yt%
nnoremap ya% F%yt%
nnoremap yi= T=yt=
nnoremap ya= F=yt=
nnoremap yi? T?yt?
nnoremap ya? F?yt?
nnoremap yi! T!yt!
nnoremap ya! F!yt!
nnoremap yi& T&yt&
nnoremap ya& F&yt&
nnoremap yi* T*yt*
nnoremap ya* F*yt*
" Text objects for delimiters.

" Shortcut to use blackhole register by default
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
vnoremap D "_D
nnoremap c "_c
vnoremap c "_c
nnoremap C "_C
vnoremap C "_C
nnoremap x "_x
vnoremap x "_x
nnoremap X "_X
vnoremap X "_X
nnoremap <leader>d d
vnoremap <leader>d d
nnoremap <leader>D D
vnoremap <leader>D D
nnoremap <leader>c c
vnoremap <leader>c c
nnoremap <leader>C C
vnoremap <leader>C C
nnoremap <leader>x x
vnoremap <leader>x x
nnoremap <leader>X X
vnoremap <leader>X X
" Shortcut to use blackhole register by default

" Map to insert inside brackets
nnoremap <leader>pi a<CR><Esc>"_dd<S-p>

" INFORMATION --------------------------
"
" zs                      Scroll the screen horizontally to position the cursor
"                         at the start (left side) of the screen.
